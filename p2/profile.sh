#!/bin/bash

# List of C++ source files
cpp_files=("matrixDequKosaraju.cpp" "vectorDequKosaraju.cpp" "matrixListKosaraju.cpp" "vectorListKosaraju.cpp")
exec_files=()

# Directory to store the profiling results
profile_dir="profiling_results"
mkdir -p "$profile_dir"

# Step 0: Generate input.txt with 1000 nodes and 5000 edges
input_file="input.txt"
num_nodes=1000
num_edges=5000

echo "Generating input file with $num_nodes nodes and $num_edges edges..."
echo "$num_nodes $num_edges" > "$input_file"

# Randomly generate $num_edges edges (u, v)
for ((i = 0; i < num_edges; i++)); do
    u=$((RANDOM % num_nodes + 1))  # Random node between 1 and 1000
    v=$((RANDOM % num_nodes + 1))  # Random node between 1 and 1000
    echo "$u $v" >> "$input_file"
done

echo "Input file generated: $input_file"

# Step 1: Compile each file with profiling enabled (-pg for gprof)
echo "Compiling C++ files with profiling..."
for file in "${cpp_files[@]}"; do
    # Extract the base name (without extension) to use as the executable name
    base_name=$(basename "$file" .cpp)
    exec_file="./$base_name"
    exec_files+=("$exec_file")
    
    # Compile with -pg for gprof profiling
    g++ -pg -o "$exec_file" "$file"
    
    if [[ $? -ne 0 ]]; then
        echo "Compilation failed for $file"
        exit 1
    fi
    
    echo "Compiled $file -> $exec_file"
done

# Step 2: Run each executable and gather profiling data with time measurement
echo "Running executables and generating profiling data..."
for exec in "${exec_files[@]}"; do
    echo "Running $exec..."

    # Measure the time and store the output to the respective files
    # The time command outputs to STDERR, so we redirect it to a timing file
    { time ./"$exec" < "$input_file" > "$profile_dir/output_$(basename "$exec").txt"; } 2> "$profile_dir/time_$(basename "$exec").txt"
    
    if [[ $? -ne 0 ]]; then
        echo "Execution failed for $exec"
        exit 1
    fi
    
    echo "Execution of $exec completed. Time saved to $profile_dir/time_$(basename "$exec").txt"
    
    # Step 3: Generate gprof profiling data and save it
    gprof "$exec" gmon.out > "$profile_dir/gprof_$(basename "$exec").txt"
    echo "Profiling data for $exec saved to $profile_dir/gprof_$(basename "$exec").txt"
    
    # Clean up the gmon.out file (generated by the program) for next run
    rm gmon.out
done

echo "Profiling complete. Results are stored in $profile_dir."
